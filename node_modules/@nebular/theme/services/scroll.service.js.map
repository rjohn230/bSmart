{"version":3,"file":"scroll.service.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/scroll.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,OAAO,EAAc,MAAM,MAAM,CAAC;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;;;;;;;;;;;;kCAgCR,IAAI,OAAO,EAAO;6BACvB,IAAI,OAAO,EAAoB;uBACrC,IAAI,OAAO,EAAO;;IAEpC;;;;OAIG;;;;;;IACH,2CAAW;;;;;IAAX;QAAA,iBAQC;QAPC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAsC;YAC9D,IAAM,QAAQ,GAAG,IAAI,OAAO,EAAoB,CAAC;YACjD,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7B,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;YAE3C,MAAM,CAAC,cAAM,OAAA,QAAQ,CAAC,QAAQ,EAAE,EAAnB,CAAmB,CAAC;SAClC,CAAC,CAAC;KACJ;IAED;;;;;OAKG;;;;;;;IACH,wCAAQ;;;;;;IAAR,UAAS,CAAgB,EAAE,CAAgB;QAAlC,kBAAA,EAAA,QAAgB;QAAE,kBAAA,EAAA,QAAgB;QACzC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;KACnC;IAED;;;;OAIG;;;;;;IACH,wCAAQ;;;;;IAAR;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAO,CAAC,CAAC;KACxC;IAED;;;OAGG;;;;;IACH,8CAAc;;;;IAAd;QACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAoB,CAAC,CAAC;KAC3D;IAED;;;OAGG;;;;;IACH,6CAAa;;;;IAAb;QACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;KAChC;IAED;;;OAGG;;;;;IACH,gDAAgB;;;;IAAhB,UAAiB,KAAU;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1B;;gBA/DF,UAAU;;gCA/BX;;SAgCa,qBAAqB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject, Subscriber } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * Scroll position type\n */\nexport interface NbScrollPosition {\n\n  /**\n   * x - left\n   * @type {number}\n   */\n  x: number;\n\n  /**\n   * y - top\n   * @type {number}\n   */\n  y: number;\n}\n\n/**\n * Layout scroll service. Provides information about current scroll position,\n * as well as methods to update position of the scroll.\n *\n * The reason we added this service is that in Nebular there are two scroll modes:\n * - the default mode when scroll is on body\n * - and the `withScroll` mode, when scroll is removed from the body and moved to an element inside of the\n * `nb-layout` component\n */\n@Injectable()\nexport class NbLayoutScrollService {\n\n  private scrollPositionReq$ = new Subject<any>();\n  private manualScroll$ = new Subject<NbScrollPosition>();\n  private scroll$ = new Subject<any>();\n\n  /**\n   * Returns scroll position\n   *\n   * @returns {Observable<NbScrollPosition>}\n   */\n  getPosition(): Observable<NbScrollPosition> {\n    return Observable.create((observer: Subscriber<NbScrollPosition>) => {\n      const listener = new Subject<NbScrollPosition>();\n      listener.subscribe(observer);\n      this.scrollPositionReq$.next({ listener });\n\n      return () => listener.complete();\n    });\n  }\n\n  /**\n   * Sets scroll position\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  scrollTo(x: number = null, y: number = null) {\n    this.manualScroll$.next({ x, y });\n  }\n\n  /**\n   * Returns a stream of scroll events\n   *\n   * @returns {Observable<any>}\n   */\n  onScroll() {\n    return this.scroll$.pipe(share<any>());\n  }\n\n  /**\n   * @private\n   * @returns Observable<NbScrollPosition>.\n   */\n  onManualScroll(): Observable<NbScrollPosition> {\n    return this.manualScroll$.pipe(share<NbScrollPosition>());\n  }\n\n  /**\n   * @private\n   * @returns {Subject<any>}\n   */\n  onGetPosition(): Subject<any> {\n    return this.scrollPositionReq$;\n  }\n\n  /**\n   * @private\n   * @param {any} event\n   */\n  fireScrollChange(event: any) {\n    this.scroll$.next(event);\n  }\n}\n"]}