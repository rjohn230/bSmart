{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/cdk/overlay/overlay.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0C,UAAU,EAAqB,MAAM,eAAe,CAAC;AAEtG,OAAO,EACL,iBAAiB,EAEjB,SAAS,GAIV,MAAM,WAAW,CAAC;AACnB,OAAO,EAAE,wBAAwB,EAAE,MAAM,qCAAqC,CAAC;AAK/E,MAAM,gBAAmB,SAA0B,EAAE,gBAAwB;IAC3E,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IACpD,SAAS,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;IAC5C,MAAM,CAAC,SAAS,CAAC;CAClB;AAED,MAAM,0BACJ,GAAiB,EACjB,SAA6B,EAC7B,OAAe,EACf,wBAAmD;IAEnD,IAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,wBAAwB,CAAC,CAAC,CAAC;IACxG,KAAK,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC7B,MAAM,CAAC,YAAY,CAAC;CACrB;;IAIC,0BAAsB,OAAkB,EAAY,eAAyC;QAAvE,YAAO,GAAP,OAAO,CAAW;QAAY,oBAAe,GAAf,eAAe,CAA0B;KAC5F;IAED,sBAAI,8CAAgB;aAApB;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;SACtC;;;OAAA;IAED,iCAAM,GAAN,UAAO,MAAwB;QAC7B,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE;aACrC,SAAS,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC,CAAC;QAClD,MAAM,CAAC,UAAU,CAAC;KACnB;;gBAdF,UAAU;;;;gBA3BT,SAAS;gBAKF,wBAAwB;;2BAVjC;;SAiCa,gBAAgB","sourcesContent":["import { ComponentFactoryResolver, ComponentRef, Injectable, TemplateRef, Type } from '@angular/core';\n\nimport {\n  NbComponentPortal,\n  NbComponentType,\n  NbOverlay,\n  NbOverlayConfig,\n  NbOverlayRef,\n  NbScrollStrategyOptions,\n} from './mapping';\nimport { NbLayoutDirectionService } from '../../../services/direction.service';\n\n\nexport type NbOverlayContent = Type<any> | TemplateRef<any> | string;\n\nexport function patch<T>(container: ComponentRef<T>, containerContext: Object): ComponentRef<T> {\n  Object.assign(container.instance, containerContext);\n  container.changeDetectorRef.detectChanges();\n  return container;\n}\n\nexport function createContainer<T>(\n  ref: NbOverlayRef,\n  container: NbComponentType<T>,\n  context: Object,\n  componentFactoryResolver?: ComponentFactoryResolver,\n  ): ComponentRef<T> {\n  const containerRef = ref.attach(new NbComponentPortal(container, null, null, componentFactoryResolver));\n  patch(containerRef, context);\n  return containerRef;\n}\n\n@Injectable()\nexport class NbOverlayService {\n  constructor(protected overlay: NbOverlay, protected layoutDirection: NbLayoutDirectionService) {\n  }\n\n  get scrollStrategies(): NbScrollStrategyOptions {\n    return this.overlay.scrollStrategies;\n  }\n\n  create(config?: NbOverlayConfig): NbOverlayRef {\n    const overlayRef = this.overlay.create(config);\n    this.layoutDirection.onDirectionChange()\n      .subscribe(dir => overlayRef.setDirection(dir));\n    return overlayRef;\n  }\n}\n"]}