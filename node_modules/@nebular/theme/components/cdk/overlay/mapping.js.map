{"version":3,"file":"mapping.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/cdk/overlay/mapping.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  ModuleWithProviders,\n  NgModule,\n  NgZone,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CdkPortal,\n  CdkPortalOutlet,\n  ComponentPortal,\n  DomPortalOutlet,\n  Portal,\n  PortalInjector,\n  PortalModule,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ComponentType,\n  ConnectedOverlayPositionChange,\n  ConnectedPosition,\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayKeyboardDispatcher,\n  OverlayModule,\n  OverlayPositionBuilder,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ScrollStrategyOptions,\n} from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality } from '@angular/cdk/bidi';\n\nimport { NB_DOCUMENT } from '../../../theme.options';\n\n\n@Directive({ selector: '[nbPortal]' })\nexport class NbPortalDirective extends CdkPortal {\n}\n\n@Directive({ selector: '[nbPortalOutlet]' })\nexport class NbPortalOutletDirective extends CdkPortalOutlet {\n}\n\nexport class NbComponentPortal<T = any> extends ComponentPortal<T> {\n  constructor(component: ComponentType<T>,\n              vcr?: ViewContainerRef,\n              injector?: Injector,\n              public cfr?: ComponentFactoryResolver) {\n    super(component, vcr, injector);\n  }\n}\n\n/**\n * TODO remove after @angular/cdk@7.0.0 relased\n * */\nexport class NbDomPortalOutlet extends DomPortalOutlet {\n  constructor(\n    /** Element into which the content is projected. */\n    public outletElement: Element,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private defaultInjector: Injector) {\n    super(outletElement, componentFactoryResolver, appRef, defaultInjector);\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: NbComponentPortal<T>): ComponentRef<T> {\n    const resolver = portal.cfr || this.componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n        componentFactory,\n        portal.viewContainerRef.length,\n        portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this.defaultInjector);\n      this.appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this.appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this.getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n@Injectable()\nexport class NbOverlay extends Overlay {\n  protected appRef: ApplicationRef;\n  protected static nextUniqueId = 0;\n\n  constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    public scrollStrategies: ScrollStrategyOptions,\n    protected overlayContainer: OverlayContainer,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected positionBuilder: OverlayPositionBuilder,\n    protected keyboardDispatcher: OverlayKeyboardDispatcher,\n    protected injector: Injector,\n    protected ngZone: NgZone,\n    @Inject(NB_DOCUMENT) private document: any,\n    private directionality: Directionality) {\n    super(\n      scrollStrategies,\n      overlayContainer,\n      componentFactoryResolver,\n      positionBuilder,\n      keyboardDispatcher,\n      injector,\n      ngZone,\n      document,\n      directionality,\n    );\n  }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this.createHostElement();\n    const pane = this.createPaneElement(host);\n    const portalOutlet = this.createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this.directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this.ngZone,\n      this.keyboardDispatcher, this.document);\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  protected createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this.document.createElement('div');\n\n    pane.id = `cdk-overlay-${NbOverlay.nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  protected createHostElement(): HTMLElement {\n    const host = this.document.createElement('div');\n    this.overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  protected createPortalOutlet(pane: HTMLElement): NbDomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this.appRef) {\n      this.appRef = this.injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new NbDomPortalOutlet(pane, this.componentFactoryResolver, this.appRef, this.injector);\n  }\n}\n\n@Injectable()\nexport class NbPlatform extends Platform {\n}\n\n@Injectable()\nexport class NbOverlayPositionBuilder extends OverlayPositionBuilder {\n}\n\nexport class NbTemplatePortal<T = any> extends TemplatePortal<T> {\n  constructor(template: TemplateRef<T>, viewContainerRef?: ViewContainerRef, context?: T) {\n    super(template, viewContainerRef, context);\n  }\n}\n\nexport class NbOverlayContainer extends OverlayContainer {\n}\n\nexport class NbFlexibleConnectedPositionStrategy extends FlexibleConnectedPositionStrategy {\n}\n\nexport class NbPortalInjector extends PortalInjector {\n}\n\nexport type NbPortal<T = any> = Portal<T>;\nexport type NbOverlayRef = OverlayRef;\nexport type NbComponentType<T = any> = ComponentType<T>;\nexport type NbPositionStrategy = PositionStrategy;\nexport type NbConnectedPosition = ConnectedPosition;\nexport type NbConnectedOverlayPositionChange = ConnectedOverlayPositionChange;\nexport type NbConnectionPositionPair = ConnectionPositionPair;\nexport type NbOverlayConfig = OverlayConfig;\nexport type NbScrollStrategyOptions = ScrollStrategyOptions;\nexport type NbScrollStrategy = ScrollStrategy;\n\nconst CDK_MODULES = [OverlayModule, PortalModule];\n\n/**\n * This module helps us to keep all angular/cdk deps inside our cdk module via providing aliases.\n * Approach will help us move cdk in separate npm package and refactor nebular/theme code.\n * */\n@NgModule({\n  imports: [...CDK_MODULES],\n  exports: [\n    ...CDK_MODULES,\n    NbPortalDirective,\n    NbPortalOutletDirective,\n  ],\n  declarations: [NbPortalDirective, NbPortalOutletDirective],\n})\nexport class NbCdkMappingModule {\n  static forRoot(): ModuleWithProviders {\n    return <ModuleWithProviders> {\n      ngModule: NbCdkMappingModule,\n      providers: [\n        NbOverlay,\n        NbPlatform,\n        NbOverlayPositionBuilder,\n      ],\n    };\n  }\n}\n"]}