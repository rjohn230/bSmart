{"version":3,"file":"chat-message.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/chat/chat-message.component.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACvF,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;AACnD,OAAO,EAAE,YAAY,EAAa,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6K/E,gCAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;0BA1ExB,KAAK;KA0EwB;0BA/E/C,4CAAQ;;YACV,MAAM,CAAC,IAAI,CAAC;;;;;0BAOV,4CAAQ;;YACV,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;;;;;0BAStB,yCAAK;;;;kBAAC,GAAY;YACpB,IAAI,CAAC,UAAU,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;;;;;0BAkD3C,0CAAM;;;;;kBAAC,KAAa;YACtB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,SAAO,KAAK,MAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;;;;;IAWhG,4CAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAErC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;SACxE;QAED,MAAM,CAAC,EAAE,CAAC;KACX;;gBAzIF,SAAS,SAAC;oBACT,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,ynCA2BT;oBACD,UAAU,EAAE;wBACV,OAAO,CAAC,UAAU,EAAE;4BAClB,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;4BAClD,UAAU,CAAC,WAAW,EAAE;gCACtB,KAAK,CAAC,EAAE,SAAS,EAAE,mBAAmB,EAAE,CAAC;gCACzC,OAAO,CAAC,EAAE,CAAC;6BACZ,CAAC;4BACF,UAAU,CAAC,WAAW,EAAE;gCACtB,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC,CAAC;6BACtD,CAAC;yBACH,CAAC;qBACH;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBA1FQ,YAAY;;;6BA8FlB,WAAW,SAAC,WAAW;+BAKvB,WAAW,SAAC,aAAa;6BAGzB,WAAW,SAAC,iBAAiB;0BAU7B,KAAK;4BASL,KAAK;2BAML,KAAK;yBAML,KAAK;0BAML,KAAK;0BAML,KAAK;6BAML,KAAK;8BAML,KAAK;2BAML,KAAK;yBASL,KAAK;;iCApLR;;SAmGa,sBAAsB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { convertToBoolProperty } from '../helpers';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Chat message component.\n *\n * Multiple message types are available through a `type` property, such as\n * - text - simple text message\n * - file - could be a file preview or a file icon\n * if multiple files are provided grouped files are shown\n * - quote - quotes a message with specific quote styles\n * - map - shows a google map picture by provided [latitude] and [longitude] properties\n *\n * @stacked-example(Available Types, chat/chat-message-types-showcase.component)\n *\n * Message with attached files:\n * ```html\n * <nb-chat-message\n *   type=\"file\"\n *   [files]=\"[ { url: '...' } ]\"\n *   message=\"Hello world!\">\n * </nb-chat-message>\n * ```\n *\n * Map message:\n * ```html\n * <nb-chat-message\n *   type=\"map\"\n *   [latitude]=\"53.914\"\n *   [longitude]=\"27.59\"\n *   message=\"Here I am\">\n * </nb-chat-message>\n * ```\n *\n * @styles\n *\n * chat-message-fg:\n * chat-message-bg:\n * chat-message-reply-bg:\n * chat-message-reply-fg:\n * chat-message-avatar-bg:\n * chat-message-sender-fg:\n * chat-message-quote-fg:\n * chat-message-quote-bg:\n * chat-message-file-fg:\n * chat-message-file-bg:\n */\n@Component({\n  selector: 'nb-chat-message',\n  template: `\n    <div class=\"avatar\" [style.background-image]=\"avatarStyle\" *ngIf=\"!replyValue\">\n      <ng-container *ngIf=\"!avatarStyle\">\n        {{ getInitials() }}\n      </ng-container>\n    </div>\n    <div class=\"message\">\n      <ng-container [ngSwitch]=\"type\">\n\n        <nb-chat-message-file *ngSwitchCase=\"'file'\"\n                              [sender]=\"sender\" [date]=\"date\" [message]=\"message\" [files]=\"files\">\n        </nb-chat-message-file>\n\n        <nb-chat-message-quote *ngSwitchCase=\"'quote'\"\n                              [sender]=\"sender\" [date]=\"date\" [message]=\"message\" [quote]=\"quote\">\n        </nb-chat-message-quote>\n\n        <nb-chat-message-map *ngSwitchCase=\"'map'\"\n                              [sender]=\"sender\" [date]=\"date\"\n                              [message]=\"message\" [latitude]=\"latitude\" [longitude]=\"longitude\">\n        </nb-chat-message-map>\n\n        <nb-chat-message-text *ngSwitchDefault\n                              [sender]=\"sender\" [date]=\"date\" [message]=\"message\">\n        </nb-chat-message-text>\n      </ng-container>\n    </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('in', style({ transform: 'translateX(0)' })),\n      transition('void => *', [\n        style({ transform: 'translateX(-100%)' }),\n        animate(80),\n      ]),\n      transition('* => void', [\n        animate(80, style({ transform: 'translateX(100%)' })),\n      ]),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbChatMessageComponent {\n\n\n  @HostBinding('@flyInOut')\n  get flyInOut() {\n    return true;\n  }\n\n  @HostBinding('class.reply')\n  replyValue: boolean = false;\n\n  @HostBinding('class.not-reply')\n  get notReply() {\n    return !this.replyValue;\n  }\n\n  avatarStyle: SafeStyle;\n\n  /**\n   * Determines if a message is a reply\n   */\n  @Input()\n  set reply(val: boolean) {\n    this.replyValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Message sender\n   * @type {string}\n   */\n  @Input() message: string;\n\n  /**\n   * Message sender\n   * @type {string}\n   */\n  @Input() sender: string;\n\n  /**\n   * Message send date\n   * @type {Date}\n   */\n  @Input() date: Date;\n\n  /**\n   * Array of files `{ url: 'file url', icon: 'file icon class' }`\n   * @type {string}\n   */\n  @Input() files: { url: string, icon: string }[];\n\n  /**\n   * Quoted message text\n   * @type {string}\n   */\n  @Input() quote: string;\n\n  /**\n   * Map latitude\n   * @type {number}\n   */\n  @Input() latitude: number;\n\n  /**\n   * Map longitude\n   * @type {number}\n   */\n  @Input() longitude: number;\n\n  /**\n   * Message send avatar\n   * @type {string}\n   */\n  @Input()\n  set avatar(value: string) {\n    this.avatarStyle = value ? this.domSanitizer.bypassSecurityTrustStyle(`url(${value})`) : null;\n  }\n\n  /**\n   * Message type, available options `text|file|map|quote`\n   * @type {string}\n   */\n  @Input() type: string;\n\n  constructor(private domSanitizer: DomSanitizer) { }\n\n  getInitials(): string {\n    if (this.sender) {\n      const names = this.sender.split(' ');\n\n      return names.map(n => n.charAt(0)).splice(0, 2).join('').toUpperCase();\n    }\n\n    return '';\n  }\n}\n"]}