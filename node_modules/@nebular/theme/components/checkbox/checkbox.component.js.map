{"version":3,"file":"checkbox.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/checkbox/checkbox.component.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC1E,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA2Ef,KAAK;wBAEnB,KAAK;wBA8BT,eAAS;yBACR,eAAS;;0BA7BtB,4CAAW;uBAAC,GAAY;YAC1B,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;;;;;0BAQzC,0CAAS;;;;;kBAAC,GAAW;YACvB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;;;;;0BAIhB,wCAAO;;YACT,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC;;;;;0BAI/B,wCAAO;;YACT,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC;;;;;0BAI/B,uCAAM;;YACR,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC;;;;;IAMlC,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;SACpB;aAED,UAAU,GAAG;YACX,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;;;OANA;IAQD,8CAAgB,GAAhB,UAAiB,EAAO;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAED,+CAAiB,GAAjB,UAAkB,EAAO;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;IAED,wCAAU,GAAV,UAAW,GAAQ;QACjB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;KAClB;IAED,8CAAgB,GAAhB,UAAiB,GAAY;QAC3B,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;KAC5C;;gBAzFF,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,yZAWT;oBACD,SAAS,EAAE,CAAE,0BAA0B,CAAE;oBACzC,SAAS,EAAE,CAAC;4BACV,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,mBAAmB,EAAnB,CAAmB,CAAC;4BAClD,KAAK,EAAE,IAAI;yBACZ,CAAC;iBACH;;;;2BAUE,KAAK,SAAC,OAAO;gCAGb,KAAK,SAAC,UAAU;8BAShB,KAAK,SAAC,QAAQ;4BAKd,WAAW,SAAC,eAAe;4BAK3B,WAAW,SAAC,eAAe;2BAK3B,WAAW,SAAC,cAAc;;8BA9G7B;;SA0Ea,mBAAmB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, Input, HostBinding, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { convertToBoolProperty } from '../helpers';\n\n/**\n * Styled checkbox component\n *\n * @stacked-example(Showcase, checkbox/checkbox-showcase.component)\n *\n * ### Installation\n *\n * Import `NbCheckboxComponent` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbCheckboxComponent,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Can have one of the following statuses: danger, success or warning\n *\n * @stacked-example(Colored Checkboxes, checkbox/checkbox-status.component)\n *\n * @additional-example(Disabled Checkbox, checkbox/checkbox-disabled.component)\n *\n * @styles\n *\n * checkbox-bg:\n * checkbox-size:\n * checkbox-border-size:\n * checkbox-border-color:\n * checkbox-checkmark:\n * checkbox-checked-bg:\n * checkbox-checked-size:\n * checkbox-checked-border-size:\n * checkbox-checked-border-color:\n * checkbox-checked-checkmark:\n * checkbox-disabled-bg:\n * checkbox-disabled-size:\n * checkbox-disabled-border-size:\n * checkbox-disabled-border-color:\n * checkbox-disabled-checkmark:\n */\n@Component({\n  selector: 'nb-checkbox',\n  template: `\n    <label class=\"customised-control\">\n      <input type=\"checkbox\" class=\"customised-control-input\"\n             [disabled]=\"disabled\"\n             [checked]=\"value\"\n             (change)=\"value = !value\">\n      <span class=\"customised-control-indicator\"></span>\n      <span class=\"customised-control-description\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  `,\n  styleUrls: [ `./checkbox.component.css` ],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NbCheckboxComponent),\n    multi: true,\n  }],\n})\nexport class NbCheckboxComponent implements ControlValueAccessor {\n\n  status: string;\n\n  /**\n   * Checkbox value\n   * @type {boolean}\n   * @private\n   */\n  @Input('value') _value: boolean = false;\n\n  disabled: boolean = false;\n  @Input('disabled')\n  set setDisabled(val: boolean) {\n    this.disabled = convertToBoolProperty(val);\n  }\n\n  /**\n   * Checkbox status (success, warning, danger)\n   * @param {string} val\n   */\n  @Input('status')\n  set setStatus(val: string) {\n    this.status = val;\n  }\n\n  @HostBinding('class.success')\n  get success() {\n    return this.status === 'success';\n  }\n\n  @HostBinding('class.warning')\n  get warning() {\n    return this.status === 'warning';\n  }\n\n  @HostBinding('class.danger')\n  get danger() {\n    return this.status === 'danger';\n  }\n\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n    this.onChange(val);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  writeValue(val: any) {\n    this.value = val;\n  }\n\n  setDisabledState(val: boolean) {\n    this.disabled = convertToBoolProperty(val);\n  }\n}\n"]}