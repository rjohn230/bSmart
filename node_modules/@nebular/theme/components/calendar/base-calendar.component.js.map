{"version":3,"file":"base-calendar.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/calendar/base-calendar.component.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,KAAK,EAAU,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAElG,OAAO,EAAE,aAAa,EAAkB,cAAc,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;;;;;;;IA8ElG,iCAAsB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;;;;;6BA5DjB,IAAI;;;;8BAKmB,kBAAkB,CAAC,IAAI;;;;;oBAoChD,cAAc,CAAC,MAAM;;;;0BAOtB,IAAI;;;;0BAUK,IAAI,YAAY,EAAE;wBAqB/C,kBAAkB;KAlB5B;IAED,0CAAQ,GAAR;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC7C;KACF;0BAGG,2CAAM;;YACR,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,MAAM,CAAC;;;;;0BAIvC,0CAAK;;YACT,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,KAAK,CAAC;;;;;IAK5C,6CAAW,GAAX,UAAY,QAA4B;QACtC,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;KAChC;IAED,gDAAc,GAAd,UAAe,WAAc;QAC3B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAChC;IAED,2CAAS,GAAT;QACE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7B;IAED,2CAAS,GAAT;QACE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAC5B;IAED,2CAAS,GAAT;QACE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5B;IAED,2CAAS,GAAT;QACE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;KAC3B;IAED,+CAAa,GAAb;QACE,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;KAC7C;IAEO,oDAAkB,GAA1B,UAA2B,SAAiB;QAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;KAC3E;IAEO,mDAAiB,GAAzB,UAA0B,SAAiB;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,GAAG,EAAE,CAAC,CAAC;KAC/E;;gBA9HF,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,gCAAgC;iBAC9C;;;;gBAXQ,aAAa;;;kCAkBnB,KAAK;mCAKL,KAAK,SAAC,WAAW;wBAKjB,KAAK;wBAKL,KAAK;2BAKL,KAAK;qCAKL,KAAK;uCAKL,KAAK;sCAKL,KAAK;yBAML,KAAK;gCAEL,KAAK;+BAKL,KAAK;yBAKL,KAAK;+BAKL,MAAM;2BAWN,WAAW,SAAC,cAAc;0BAK1B,WAAW,SAAC,aAAa;;kCApG5B;;SAoBa,uBAAuB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, EventEmitter, HostBinding, Input, OnInit, Output, Type } from '@angular/core';\n\nimport { NbDateService, NbCalendarCell, NbCalendarSize, NbCalendarViewMode } from '../calendar-kit';\n\n\n/**\n * The basis for calendar and range calendar components.\n * Encapsulates common behavior - store calendar state and perform navigation\n * between pickers.\n * */\n@Component({\n  selector: 'nb-base-calendar',\n  templateUrl: './base-calendar.component.html',\n})\nexport class NbBaseCalendarComponent<D, T> implements OnInit {\n\n  /**\n   * Defines if we should render previous and next months\n   * in the current month view.\n   * */\n  @Input() boundingMonth: boolean = true;\n\n  /**\n   * Defines active view for calendar.\n   * */\n  @Input('startView') activeViewMode: NbCalendarViewMode = NbCalendarViewMode.DATE;\n\n  /**\n   * Minimum available date for selection.\n   * */\n  @Input() min: D;\n\n  /**\n   * Maximum available date for selection.\n   * */\n  @Input() max: D;\n\n  /**\n   * Predicate that decides which cells will be disabled.\n   * */\n  @Input() filter: (D) => boolean;\n\n  /**\n   * Custom day cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input() dayCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Custom month cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input() monthCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Custom year cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input() yearCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Size of the calendar and entire components.\n   * Can be 'medium' which is default or 'large'.\n   * */\n  @Input() size: NbCalendarSize = NbCalendarSize.MEDIUM;\n\n  @Input() visibleDate: D;\n\n  /**\n   * Determines should we show calendars header or not.\n   * */\n  @Input() showHeader: boolean = true;\n\n  /**\n   * Value which will be rendered as selected.\n   * */\n  @Input() date: T;\n\n  /**\n   * Emits date when selected.\n   * */\n  @Output() dateChange: EventEmitter<T> = new EventEmitter();\n\n  constructor(protected dateService: NbDateService<D>) {\n  }\n\n  ngOnInit() {\n    if (!this.visibleDate) {\n      this.visibleDate = this.dateService.today();\n    }\n  }\n\n  @HostBinding('class.medium')\n  get medium() {\n    return this.size === NbCalendarSize.MEDIUM;\n  }\n\n  @HostBinding('class.large')\n    get large() {\n    return this.size === NbCalendarSize.LARGE;\n  }\n\n  ViewMode = NbCalendarViewMode;\n\n  setViewMode(viewMode: NbCalendarViewMode) {\n    this.activeViewMode = viewMode;\n  }\n\n  setVisibleDate(visibleDate: D) {\n    this.visibleDate = visibleDate;\n  }\n\n  prevMonth() {\n    this.changeVisibleMonth(-1);\n  }\n\n  nextMonth() {\n    this.changeVisibleMonth(1);\n  }\n\n  prevYears() {\n    this.changeVisibleYear(-1);\n  }\n\n  nextYears() {\n    this.changeVisibleYear(1);\n  }\n\n  navigateToday() {\n    this.setViewMode(NbCalendarViewMode.DATE);\n    this.visibleDate = this.dateService.today();\n  }\n\n  private changeVisibleMonth(direction: number) {\n    this.visibleDate = this.dateService.addMonth(this.visibleDate, direction);\n  }\n\n  private changeVisibleYear(direction: number) {\n    this.visibleDate = this.dateService.addYear(this.visibleDate, direction * 20);\n  }\n}\n"]}