{"version":3,"file":"restore-scroll-top.service.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/layout/restore-scroll-top.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAGxD,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAClE,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;;;;;;;;;IAY9D,kCAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;KACjC;IAED,gDAAa,GAAb;QAAA,iBASC;QARC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;aACtB,IAAI,CACH,SAAS,CAAC,IAAI,CAAC,EACf,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,KAAK,IAAI,IAAI,KAAK,YAAY,aAAa,EAAhD,CAAgD,CAAC,EACjE,QAAQ,EAAE,EACV,GAAG,CAAC,UAAC,EAA+C;gBAA9C,YAAI,EAAE,eAAO;YAAsC,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC;QAA/B,CAA+B,CAAC,EACzF,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,EAAL,CAAK,CAAC,CACrB,CAAC;KACL;IAEO,8CAAW,GAAnB,UAAoB,IAAmB,EAAE,OAAsB;QAC7D,MAAM,CAAC,CAAC,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC9E;;gBAnBF,UAAU;;;;gBAba,MAAM;;mCAD9B;;SAea,wBAAwB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { filter, pairwise, startWith, map } from 'rxjs/operators';\nimport { getPathPartOfUrl } from '../menu/url-matching-helpers';\n\n/**\n * This service determines whether we should scroll the layout back to top.\n * This occurs when the page is changed, so when current url PATH is not equal to the previous one.\n *\n *  TODO: this is most likely a temporary solutions as recently Angular introduces ViewportScroll\n *  and scroll restoration process\n */\n@Injectable()\nexport class NbRestoreScrollTopHelper {\n\n  constructor(private router: Router) {\n  }\n\n  shouldRestore(): Observable<boolean> {\n    return this.router.events\n      .pipe(\n        startWith(null),\n        filter(event => event === null || event instanceof NavigationEnd),\n        pairwise(),\n        map(([prev, current]: [NavigationEnd, NavigationEnd]) => this.pageChanged(prev, current)),\n        filter(res => !!res),\n      );\n  }\n\n  private pageChanged(prev: NavigationEnd, current: NavigationEnd) {\n    return !prev || getPathPartOfUrl(prev.url) !== getPathPartOfUrl(current.url);\n  }\n}\n"]}