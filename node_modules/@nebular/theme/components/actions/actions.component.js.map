{"version":3,"file":"actions.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/actions/actions.component.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EACL,SAAS,EACT,KAAK,EACL,WAAW,GACZ,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;;;;;;6BAmBO,KAAK;;0BAazD,uCAAQ;;;;;kBAAC,GAAY;YACvB,IAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;;;;;;gBA5BnD,SAAS,SAAC;oBACT,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,kYAQT;iBACF;;;;kCAGE,WAAW,SAAC,gBAAgB;yBAM5B,KAAK;6BAML,KAAK;8BASL,KAAK;gCAOL,KAAK;kCASL,KAAK;;4BApER;;SA6Ba,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA+HF,KAAK;;0BAf3B,qCAAK;;YACP,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,kBAAkB,CAAC,UAAU,CAAC;;;;;0BAItD,sCAAM;;YACR,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,kBAAkB,CAAC,WAAW,CAAC;;;;;0BAIvD,qCAAK;;YACP,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,kBAAkB,CAAC,UAAU,CAAC;;;;;0BAWtD,oCAAI;;;;;kBAAC,GAAW;YAClB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;;;;;0BAQnB,uCAAO;;;;;kBAAC,GAAY;YACtB,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;;;;;0BAQ7C,yCAAS;;;;;kBAAC,GAAY;YACxB,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;;;;;oCAlDtB,OAAO;qCACN,QAAQ;oCACT,OAAO;;gBAXrC,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,SAAS,EAAE,CAAC,yBAAyB,CAAC;oBACtC,QAAQ,EAAE,0DAET;iBACF;;;;iCASE,WAAW,SAAC,eAAe;0BAE3B,WAAW,SAAC,aAAa;2BAKzB,WAAW,SAAC,cAAc;0BAK1B,WAAW,SAAC,aAAa;mCAKzB,WAAW,SAAC,kBAAkB;yBAO9B,KAAK;4BASL,KAAK;8BASL,KAAK;;6BApLR;;SAkIa,kBAAkB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Component,\n  Input,\n  HostBinding,\n} from '@angular/core';\n\nimport { convertToBoolProperty } from '../helpers';\n\n/**\n * Action item, display a link with an icon, or any other content provided instead.\n */\n@Component({\n  selector: 'nb-action',\n  template: `\n    <a class=\"icon-container\" href=\"#\" *ngIf=\"icon; else showContent\" (click)=\"$event.preventDefault()\">\n      <i class=\"control-icon {{ icon }}\"></i>\n    </a>\n    <ng-template #showContent>\n      <ng-content></ng-content>\n    </ng-template>\n    <nb-badge *ngIf=\"badgeText\" [text]=\"badgeText\" [status]=\"badgeStatus\" [position]=\"badgePosition\"></nb-badge>\n  `,\n})\nexport class NbActionComponent {\n\n  @HostBinding('class.disabled') disabledValue: boolean = false;\n\n  /**\n   * Icon class to display\n   * @type string\n   */\n  @Input() icon: string;\n\n  /**\n   * Disables the item (changes item opacity and mouse cursor)\n   * @type boolean\n   */\n  @Input()\n  set disabled(val: boolean) {\n    this.disabledValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Badge text to display\n   * @type string\n   */\n  @Input() badgeText: string;\n\n  /**\n   * Badge status (adds specific styles):\n   * 'primary', 'info', 'success', 'warning', 'danger'\n   * @param {string} val\n   */\n  @Input() badgeStatus: string;\n\n  /**\n   * Badge position.\n   * Can be set to any class or to one of predefined positions:\n   * 'top left', 'top right', 'bottom left', 'bottom right',\n   * 'top start', 'top end', 'bottom start', 'bottom end'\n   * @type string\n   */\n  @Input() badgePosition: string;\n\n}\n\n/**\n * Shows a horizontal list of actions, available in multiple sizes.\n * Aligns items vertically.\n *\n * @stacked-example(Showcase, action/action-showcase.component)\n *\n * Basic actions setup:\n * ```html\n * <nb-actions size=\"small\">\n *   <nb-action icon=\"nb-search\"></nb-action>\n *   <nb-action icon=\"nb-power-circled\"></nb-action>\n *   <nb-action icon=\"nb-person\"></nb-action>\n * </nb-actions>\n * ```\n * ### Installation\n *\n * Import `NbActionsModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbActionsModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Multiple sizes example:\n * @stacked-example(Multiple Sizes, action/action-sizes.component)\n *\n * It is also possible to specify a `badge` value:\n *\n * @stacked-example(Action Badge, action/action-badge.component)\n *\n * and we can set it to full a width of a parent component\n * @stacked-example(Full Width, action/action-width.component)\n *\n * @styles\n *\n * actions-font-size:\n * actions-font-family:\n * actions-line-height:\n * actions-fg:\n * actions-bg:\n * actions-separator:\n * actions-padding:\n * actions-size-small:\n * actions-size-medium:\n * actions-size-large:\n */\n@Component({\n  selector: 'nb-actions',\n  styleUrls: ['./actions.component.css'],\n  template: `\n    <ng-content select=\"nb-action\"></ng-content>\n  `,\n})\nexport class NbActionsComponent {\n\n  static readonly SIZE_SMALL = 'small';\n  static readonly SIZE_MEDIUM = 'medium';\n  static readonly SIZE_LARGE = 'large';\n\n  private sizeValue: string;\n\n  @HostBinding('class.inverse') inverseValue: boolean;\n\n  @HostBinding('class.small')\n  get small() {\n    return this.sizeValue === NbActionsComponent.SIZE_SMALL;\n  }\n\n  @HostBinding('class.medium')\n  get medium() {\n    return this.sizeValue === NbActionsComponent.SIZE_MEDIUM;\n  }\n\n  @HostBinding('class.large')\n  get large() {\n    return this.sizeValue === NbActionsComponent.SIZE_LARGE;\n  }\n\n  @HostBinding('class.full-width')\n  fullWidthValue: boolean = false;\n\n  /**\n   * Size of the component, small|medium|large\n   * @type string\n   */\n  @Input()\n  set size(val: string) {\n    this.sizeValue = val;\n  }\n\n  /**\n   * Makes colors inverse based on current theme\n   * @type boolean\n   */\n  @Input()\n  set inverse(val: boolean) {\n    this.inverseValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Component will fill full width of the container\n   * @type boolean\n   */\n  @Input()\n  set fullWidth(val: boolean) {\n    this.fullWidthValue = convertToBoolProperty(val);\n  }\n}\n"]}