{"version":3,"file":"toastr-config.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/toastr/toastr-config.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AACxC,OAAO,EAAE,uBAAuB,EAAoB,MAAM,QAAQ,CAAC;AAGnE,MAAM,CAAC,IAAM,gBAAgB,GAAG,IAAI,cAAc,CAAiB,wBAAwB,CAAC,CAAC;;;;AAK7F;;;AAAA;IAwCE,wBAAY,MAA+B;;;;wBApCd,uBAAuB,CAAC,OAAO;;;;sBAIpC,aAAa,CAAC,OAAO;;;;wBAI1B,IAAI;;;;8BAIG,IAAI;;;;iCAID,KAAK;;;;uBAIf,IAAI;;;;oBAIR,UAAU;;;;;YAKvB,GAAC,aAAa,CAAC,MAAM,IAAG,WAAW;YACnC,GAAC,aAAa,CAAC,OAAO,IAAG,qBAAqB;YAC9C,GAAC,aAAa,CAAC,IAAI,IAAG,SAAS;YAC/B,GAAC,aAAa,CAAC,OAAO,IAAG,UAAU;YACnC,GAAC,aAAa,CAAC,OAAO,IAAG,UAAU;;QAInC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;KAC7B;IAES,kCAAS,GAAnB,UAAoB,MAA+B;QACjD,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;SAClE;KACF;yBAlEH;IAmEC,CAAA;;;;AAlDD,0BAkDC","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { InjectionToken } from '@angular/core';\n\nimport { NbToastStatus } from './model';\nimport { NbGlobalLogicalPosition, NbGlobalPosition } from '../cdk';\n\n\nexport const NB_TOASTR_CONFIG = new InjectionToken<NbToastrConfig>('Default toastr options');\n\n/**\n * The `NbToastrConfig` class describes configuration of the `NbToastrService.show` and global toastr configuration.\n * */\nexport class NbToastrConfig {\n  /**\n   * Determines where on the screen toast have to be rendered.\n   * */\n  position: NbGlobalPosition = NbGlobalLogicalPosition.TOP_END;\n  /**\n   * Status chooses color scheme for the toast.\n   * */\n  status: NbToastStatus = NbToastStatus.PRIMARY;\n  /**\n   * Duration is timeout between toast appears and disappears.\n   * */\n  duration: number = 3000;\n  /**\n   * Destroy by click means you can hide the toast by clicking it.\n   * */\n  destroyByClick: boolean = true;\n  /**\n   * If preventDuplicates is true then the next toast with the same title and message will not be rendered.\n   * */\n  preventDuplicates: boolean = false;\n  /**\n   * Determines render icon or not.\n   * */\n  hasIcon: boolean = true;\n  /**\n   * Icon class that can be provided to render custom icon.\n   * */\n  icon: string = 'nb-email';\n  /**\n   * Toast status icon-class mapping.\n   * */\n  protected icons = {\n    [NbToastStatus.DANGER]: 'nb-danger',\n    [NbToastStatus.SUCCESS]: 'nb-checkmark-circle',\n    [NbToastStatus.INFO]: 'nb-help',\n    [NbToastStatus.WARNING]: 'nb-alert',\n    [NbToastStatus.PRIMARY]: 'nb-email',\n  };\n\n  constructor(config: Partial<NbToastrConfig>) {\n    this.patchIcon(config);\n    Object.assign(this, config);\n  }\n\n  protected patchIcon(config: Partial<NbToastrConfig>) {\n    if (!('icon' in config)) {\n      config.icon = this.icons[config.status || NbToastStatus.PRIMARY];\n    }\n  }\n}\n"]}