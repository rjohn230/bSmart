{"version":3,"file":"user.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/user/user.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, Input, HostBinding } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { convertToBoolProperty } from '../helpers';\n\n/**\n * Represents a component showing a user avatar (picture) with a user name on the right.\n * @stacked-example(Showcase, user/user-showcase.component)\n *\n * ```ts\n *   <nb-user name=\"Jonh Doe\" title=\"Engineer\"></nb-user>\n * ```\n *\n * ### Installation\n *\n * Import `NbUserModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbUserModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Available in multiple sizes:\n * @stacked-example(Multiple Sizes, user/user-sizes.component)\n *\n * @styles\n *\n * user-font-size:\n * user-line-height:\n * user-bg:\n * user-fg:\n * user-fg-highlight:\n * user-font-family-secondary:\n * user-size-small:\n * user-size-medium:\n * user-size-large:\n * user-size-xlarge:\n */\n@Component({\n  selector: 'nb-user',\n  styleUrls: ['./user.component.css'],\n  templateUrl: './user.component.html',\n})\nexport class NbUserComponent {\n\n  // TODO: it makes sense use object instead of list of variables (or even enum)\n  /*\n    static readonly SIZE = {\n     SMALL: 'small',\n     MEDIUM: 'medium',\n     LARGE: 'large',\n    };\n   */\n  static readonly SIZE_SMALL = 'small';\n  static readonly SIZE_MEDIUM = 'medium';\n  static readonly SIZE_LARGE = 'large';\n  static readonly SIZE_XLARGE = 'xlarge';\n\n  private sizeValue: string;\n\n  @HostBinding('class.inverse') inverseValue: boolean;\n\n  @HostBinding('class.small')\n  get small() {\n    return this.sizeValue === NbUserComponent.SIZE_SMALL;\n  }\n\n  @HostBinding('class.medium')\n  get medium() {\n    return this.sizeValue === NbUserComponent.SIZE_MEDIUM;\n  }\n\n  @HostBinding('class.large')\n  get large() {\n    return this.sizeValue === NbUserComponent.SIZE_LARGE;\n  }\n\n  @HostBinding('class.xlarge')\n  get xlarge() {\n    return this.sizeValue === NbUserComponent.SIZE_XLARGE;\n  }\n\n  /**\n   * Specifies a name to be shown on the right of a user picture\n   * @type string\n   */\n  @Input() name: string = 'Anonymous';\n\n  /**\n   * Specifies a title (written in a smaller font) to be shown under the **name**\n   * @type string\n   */\n  @Input() title: string;\n\n  /**\n   * Absolute path to a user picture. Or base64 image\n   * User name initials (JD for John Doe) will be shown if no picture specified\n   * @type string\n   */\n  @Input() set picture(value: string) {\n    this.imageBackgroundStyle = value ? this.domSanitizer.bypassSecurityTrustStyle(`url(${value})`) : null;\n  }\n\n  /**\n   * Color of the area shown when no picture specified\n   * @type string\n   */\n  @Input() color: string;\n\n  /**\n   * Size of the component, small|medium|large\n   * @type string\n   */\n  @Input()\n  set size(val: string) {\n    this.sizeValue = val;\n  }\n\n  /**\n   * Whether to show a user name or not\n   * @type boolean\n   */\n  @Input()\n  set showName(val: boolean) {\n    this.showNameValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Whether to show a user title or not\n   * @type boolean\n   */\n  @Input()\n  set showTitle(val: boolean) {\n    this.showTitleValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Whether to show a user initials (if no picture specified) or not\n   * @type boolean\n   */\n  @Input()\n  set showInitials(val: boolean) {\n    this.showInitialsValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Whether to show only a picture or also show the name and title\n   * @type boolean\n   */\n  @Input()\n  set onlyPicture(val: boolean) {\n    this.showNameValue = this.showTitleValue = !convertToBoolProperty(val);\n  }\n\n  /**\n   * Makes colors inverse based on current theme\n   * @type boolean\n   */\n  @Input()\n  set inverse(val: boolean) {\n    this.inverseValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Badge text to display\n   * @type string\n   */\n  @Input() badgeText: string;\n\n  /**\n   * Badge status (adds specific styles):\n   * 'primary', 'info', 'success', 'warning', 'danger'\n   * @param {string} val\n   */\n  @Input() badgeStatus: string;\n\n  /**\n   * Badge position.\n   * Can be set to any class or to one of predefined positions:\n   * 'top left', 'top right', 'bottom left', 'bottom right',\n   * 'top start', 'top end', 'bottom start', 'bottom end'\n   * @type string\n   */\n  @Input() badgePosition: string;\n\n  imageBackgroundStyle: SafeStyle;\n  showNameValue: boolean = true;\n  showTitleValue: boolean = true;\n  showInitialsValue: boolean = true;\n  isMenuShown: boolean = false;\n\n  constructor(private domSanitizer: DomSanitizer) { }\n\n  getInitials(): string {\n    if (this.name) {\n      const names = this.name.split(' ');\n\n      return names.map(n => n.charAt(0)).splice(0, 2).join('').toUpperCase();\n    }\n\n    return '';\n  }\n}\n"]}