{"version":3,"file":"radio-group.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/radio/radio-group.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { NbRadioComponent } from './radio.component';\nimport { merge } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { convertToBoolProperty } from '../helpers';\n\n\n/**\n * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.\n * It provides form bindings:\n *\n * ```html\n * <nb-radio-group [(ngModel)]=\"selectedOption\">\n *   <nb-radio>Option 1</nb-radio>\n *   <nb-radio>Option 2</nb-radio>\n *   <nb-radio>Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * Also, you can use `value` and `valueChange` for binding without forms.\n *\n * ```html\n * <nb-radio-group [(value)]=\"selectedOption\">\n *   <nb-radio>Option 1</nb-radio>\n *   <nb-radio>Option 2</nb-radio>\n *   <nb-radio>Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * Radio items name has to be provided through `name` input property of the radio group.\n *\n * ```html\n * <nb-radio-group name=\"my-radio-group\">\n *   ...\n * </nb-radio-group>\n * ```\n *\n * Also, you can disable the whole group using `disabled` attribute.\n *\n * ```html\n * <nb-radio-group disabled>\n *   ...\n * </nb-radio-group>\n * ```\n * */\n@Component({\n  selector: 'nb-radio-group',\n  template: `\n    <ng-content select=\"nb-radio\"></ng-content>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NbRadioGroupComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {\n\n  @ContentChildren(NbRadioComponent, { descendants: true }) radios: QueryList<NbRadioComponent>;\n\n  @Input('value')\n  set setValue(value: any) {\n    this.value = value;\n    this.updateValues();\n  }\n\n  @Input('name')\n  set setName(name: string){\n    this.name = name;\n    this.updateNames();\n  }\n\n  @Input('disabled')\n  set setDisabled(disabled: boolean) {\n    this.disabled = convertToBoolProperty(disabled);\n    this.updateDisabled();\n  }\n\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  protected disabled: boolean;\n  protected value: any;\n  protected name: string;\n  protected alive: boolean = true;\n  protected onChange = (value: any) => {};\n\n  constructor(protected cd: ChangeDetectorRef) {}\n\n  ngAfterContentInit() {\n    this.updateNames();\n    this.updateValues();\n    this.updateDisabled();\n    this.subscribeOnRadiosValueChange();\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n\n    if (typeof value !== 'undefined') {\n      this.updateValues();\n    }\n  }\n\n  protected updateNames() {\n    if (this.radios) {\n      this.radios.forEach((radio: NbRadioComponent) => radio.name = this.name);\n      this.markRadiosForCheck();\n    }\n  }\n\n  protected updateValues() {\n    if (this.radios && typeof this.value !== 'undefined') {\n      this.radios.forEach((radio: NbRadioComponent) => radio.checked = radio.value === this.value);\n      this.markRadiosForCheck();\n    }\n  }\n\n  protected updateDisabled() {\n    if (this.radios && typeof this.disabled !== 'undefined') {\n      this.radios.forEach((radio: NbRadioComponent) => radio.setDisabled = this.disabled);\n      this.markRadiosForCheck();\n    }\n  }\n\n  protected subscribeOnRadiosValueChange() {\n    merge(...this.radios.map((radio: NbRadioComponent) => radio.valueChange))\n      .pipe(takeWhile(() => this.alive))\n      .subscribe((value: any) => {\n        this.writeValue(value);\n        this.propagateValue(value);\n      });\n  }\n\n  protected propagateValue(value: any) {\n    this.valueChange.emit(value);\n    this.onChange(value);\n  }\n\n  protected markRadiosForCheck() {\n    this.radios.forEach((radio: NbRadioComponent) => radio.markForCheck());\n  }\n}\n"]}