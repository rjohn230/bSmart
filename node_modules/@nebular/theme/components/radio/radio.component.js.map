{"version":3,"file":"radio.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/radio/radio.component.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEnH,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgGjD,0BAAsB,EAAqB;QAArB,OAAE,GAAF,EAAE,CAAmB;2BAJA,IAAI,YAAY,EAAE;KAId;0BAR3C,yCAAW;uBAAC,QAAiB;YAC/B,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;;;;;IASlD,uCAAY,GAAZ;QACE,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QACvB,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;KACzB;IAED,mCAAQ,GAAR,UAAS,KAAY;QACnB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;IAED,kCAAO,GAAP,UAAQ,KAAY;QAClB,KAAK,CAAC,eAAe,EAAE,CAAC;KACzB;;gBApDF,SAAS,SAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,mZAeT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,SAAS,EAAE,CAAC,uBAAuB,CAAC;iBACrC;;;;gBAjFiC,iBAAiB;;;yBAmFhD,KAAK;4BAEL,KAAK;0BAEL,KAAK;gCAEL,KAAK,SAAC,UAAU;gCAKhB,MAAM;;2BApGT;;SAwFa,gBAAgB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolProperty } from '../helpers';\n\n\n/**\n * The `NbRadioComponent` provides the same functionality as native `<input type=\"radio\">`\n * with Nebular styles and animations.\n *\n * @stacked-example(Showcase, radio/radio-showcase.component)\n *\n * ### Installation\n *\n * Import `NbRadioModule` to your feature module.\n *\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbRadioModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * ### Usage\n *\n * Radio buttons should be wrapped in `nb-radio-group` to provide form bindings.\n *\n * ```html\n * <nb-radio-group [(ngModule)]=\"selectedOption\">\n *   <nb-radio>Option 1</nb-radio>\n *   <nb-radio>Option 2</nb-radio>\n *   <nb-radio>Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * You can disable some radios in the group using a `disabled` attribute.\n *\n * @stacked-example(Disabled, radio/radio-disabled.component)\n *\n *\n * @styles\n *\n * radio-bg\n * radio-fg\n * radio-size\n * radio-border-size\n * radio-border-color\n * radio-checkmark\n * radio-checked-bg\n * radio-checked-size\n * radio-checked-border-size\n * radio-checked-border-color\n * radio-checked-checkmark\n * radio-disabled-bg\n * radio-disabled-size\n * radio-disabled-border-size\n * radio-disabled-border-color\n * radio-disabled-checkmark\n * */\n@Component({\n  selector: 'nb-radio',\n  template: `\n    <label>\n      <input\n        type=\"radio\"\n        [name]=\"name\"\n        [value]=\"value\"\n        [checked]=\"checked\"\n        [disabled]=\"disabled\"\n        (change)=\"onChange($event)\"\n        (click)=\"onClick($event)\">\n      <span class=\"radio-indicator\"></span>\n      <span class=\"radio-description\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./radio.component.css'],\n})\nexport class NbRadioComponent {\n  @Input() name: string;\n\n  @Input() checked: boolean;\n\n  @Input() value: any;\n\n  @Input('disabled')\n  set setDisabled(disabled: boolean) {\n    this.disabled = convertToBoolProperty(disabled);\n  }\n\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  disabled: boolean;\n\n  constructor(protected cd: ChangeDetectorRef) {}\n\n  markForCheck() {\n    this.cd.markForCheck();\n    this.cd.detectChanges();\n  }\n\n  onChange(event: Event) {\n    event.stopPropagation();\n    this.checked = true;\n    this.valueChange.emit(this.value);\n  }\n\n  onClick(event: Event) {\n    event.stopPropagation();\n  }\n}\n"]}