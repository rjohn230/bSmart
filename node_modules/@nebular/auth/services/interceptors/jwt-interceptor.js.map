{"version":3,"file":"jwt-interceptor.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/interceptors/jwt-interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAG7D,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,gCAAgC,EAAE,MAAM,oBAAoB,CAAC;;IAKpE,8BAAoB,QAAkB,EAC0B;QAD5C,aAAQ,GAAR,QAAQ,CAAU;QAC0B,WAAM,GAAN,MAAM;KACrE;IAED,wCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAAlD,iBA4BC;;QA1BG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE;iBAC/C,IAAI,CACH,SAAS,CAAC,UAAA,aAAa;gBACrB,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAChB,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CACrC,SAAS,CAAC,UAAC,KAAkB;wBAC3B,IAAM,GAAG,GAAG,YAAU,KAAK,CAAC,QAAQ,EAAI,CAAC;wBACzC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;4BACd,UAAU,EAAE;gCACV,aAAa,EAAE,GAAG;6BACnB;yBACF,CAAC,CAAC;wBACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACzB,CAAC,CACH,CAAA;iBACJ;gBAAC,IAAI,CAAC,CAAC;;;oBAGN,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACzB;aACF,CAAC,CACH,CAAA;SACJ;QAAC,IAAI,CAAC,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;KACF;IAED,sBAAc,6CAAW;aAAzB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACzC;;;OAAA;;gBAvCF,UAAU;;;;gBARkB,QAAQ;gDAYtB,MAAM,SAAC,gCAAgC;;+BAZtD;;SASa,oBAAoB","sourcesContent":["import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { NbAuthToken } from '../token/token';\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_TOKEN_INTERCEPTOR_FILTER } from '../../auth.options';\n\n@Injectable()\nexport class NbAuthJWTInterceptor implements HttpInterceptor {\n\n  constructor(private injector: Injector,\n              @Inject(NB_AUTH_TOKEN_INTERCEPTOR_FILTER) protected filter) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // do not intercept request whose urls are filtered by the injected filter\n      if (!this.filter(req)) {\n        return this.authService.isAuthenticatedOrRefresh()\n          .pipe(\n            switchMap(authenticated => {\n              if (authenticated) {\n                  return this.authService.getToken().pipe(\n                    switchMap((token: NbAuthToken) => {\n                      const JWT = `Bearer ${token.getValue()}`;\n                      req = req.clone({\n                        setHeaders: {\n                          Authorization: JWT,\n                        },\n                      });\n                      return next.handle(req);\n                    }),\n                  )\n              } else {\n                 // Request is sent to server without authentication so that the client code\n                 // receives the 401/403 error and can act as desired ('session expired', redirect to login, aso)\n                return next.handle(req);\n              }\n            }),\n          )\n      } else {\n      return next.handle(req);\n    }\n  }\n\n  protected get authService(): NbAuthService {\n    return this.injector.get(NbAuthService);\n  }\n\n}\n"]}