{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/token/token.ts"],"names":[],"mappings":"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","sourcesContent":["import { urlBase64Decode } from '../../helpers';\n\nexport abstract class NbAuthToken {\n\n  protected payload: any = null;\n\n  abstract getValue(): string;\n  abstract isValid(): boolean;\n  // the strategy name used to acquire this token (needed for refreshing token)\n  abstract getOwnerStrategyName(): string;\n  abstract getCreatedAt(): Date;\n  abstract toString(): string;\n\n  getName(): string {\n    return (this.constructor as NbAuthTokenClass).NAME;\n  }\n\n  getPayload(): any {\n    return this.payload;\n  }\n}\n\nexport class NbAuthTokenNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthIllegalTokenError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthEmptyTokenError extends NbAuthIllegalTokenError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthIllegalJWTTokenError extends NbAuthIllegalTokenError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport interface NbAuthRefreshableToken {\n  getRefreshToken(): string;\n  setRefreshToken(refreshToken: string);\n}\n\nexport interface NbAuthTokenClass<T = NbAuthToken> {\n  NAME: string;\n  new (raw: any, strategyName: string, expDate?: Date): T;\n}\n\nexport function nbAuthCreateToken<T extends NbAuthToken>(tokenClass: NbAuthTokenClass<T>,\n                                  token: any,\n                                  ownerStrategyName: string,\n                                  createdAt?: Date) {\n  return new tokenClass(token, ownerStrategyName, createdAt);\n}\n\nexport function decodeJwtPayload(payload: string): any {\n\n  if (payload.length === 0) {\n    throw new NbAuthEmptyTokenError('Cannot extract from an empty payload.');\n  }\n\n  const parts = payload.split('.');\n\n  if (parts.length !== 3) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and must consist of three parts.`);\n  }\n\n  let decoded;\n  try {\n    decoded = urlBase64Decode(parts[1]);\n  } catch (e) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and cannot be parsed.`);\n  }\n\n  if (!decoded) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and cannot be decoded.`);\n  }\n  return JSON.parse(decoded);\n}\n\n/**\n * Wrapper for simple (text) token\n */\nexport class NbAuthSimpleToken extends NbAuthToken {\n\n  static NAME = 'nb:auth:simple:token';\n\n  constructor(protected readonly token: any,\n              protected readonly ownerStrategyName: string,\n              protected createdAt?: Date) {\n    super();\n    try {\n      this.parsePayload();\n    } catch (err) {\n      if (!(err instanceof NbAuthTokenNotFoundError)) {\n        // token is present but has got a problem, including illegal\n        throw err;\n      }\n    }\n    this.createdAt = this.prepareCreatedAt(createdAt);\n  }\n\n  protected parsePayload(): any {\n    this.payload = null;\n  }\n\n  protected prepareCreatedAt(date: Date) {\n    return date ? date : new Date();\n  }\n\n  /**\n   * Returns the token's creation date\n   * @returns {Date}\n   */\n  getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token;\n  }\n\n  getOwnerStrategyName(): string {\n    return this.ownerStrategyName;\n  }\n\n  /**\n   * Is non empty and valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return !!this.getValue();\n  }\n\n  /**\n   * Validate value and convert to string, if value is not valid return empty string\n   * @returns {string}\n   */\n  toString(): string {\n    return !!this.token ? this.token : '';\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:jwt:token';\n\n  /**\n   * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n   */\n  protected prepareCreatedAt(date: Date) {\n      const decoded = this.getPayload();\n      return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : super.prepareCreatedAt(date);\n  }\n\n  /**\n   * Returns payload object\n   * @returns any\n   */\n  protected parsePayload(): void {\n    if (!this.token) {\n      throw new NbAuthTokenNotFoundError('Token not found. ')\n    }\n    this.payload = decodeJwtPayload(this.token);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (decoded && !decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp); // 'cause jwt token are set in seconds\n    return date;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n}\n\nconst prepareOAuth2Token = (data) => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (e) {}\n  }\n  return data;\n};\n\n/**\n * Wrapper for OAuth2 token whose access_token is a JWT Token\n */\nexport class NbAuthOAuth2Token extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:oauth2:token';\n\n  constructor( data: { [key: string]: string|number }|string = {},\n               ownerStrategyName: string,\n               createdAt?: Date) {\n\n    // we may get it as string when retrieving from a storage\n    super(prepareOAuth2Token(data), ownerStrategyName, createdAt);\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token.access_token;\n  }\n\n  /**\n   * Returns the refresh token\n   * @returns string\n   */\n  getRefreshToken(): string {\n    return this.token.refresh_token;\n  }\n\n  /**\n   *  put refreshToken in the token payload\n    * @param refreshToken\n   */\n  setRefreshToken(refreshToken: string) {\n    this.token.refresh_token = refreshToken;\n  }\n\n  /**\n   * Parses token payload\n   * @returns any\n   */\n  protected parsePayload(): void {\n    if (!this.token) {\n      throw new NbAuthTokenNotFoundError('Token not found.')\n    } else {\n      if (!Object.keys(this.token).length) {\n        throw new NbAuthEmptyTokenError('Cannot extract payload from an empty token.');\n      }\n    }\n    this.payload = this.token;\n  }\n\n  /**\n   * Returns the token type\n   * @returns string\n   */\n  getType(): string {\n    return this.token.token_type;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (!this.token.hasOwnProperty('expires_in')) {\n      return null;\n    }\n    return new Date(this.createdAt.getTime() + Number(this.token.expires_in) * 1000);\n}\n\n  /**\n   * Convert to string\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify(this.token);\n  }\n}\n\n/**\n * Wrapper for OAuth2 token embedding JWT tokens\n */\nexport class NbAuthOAuth2JWTToken extends NbAuthOAuth2Token {\n\n  static NAME = 'nb:auth:oauth2:jwt:token';\n\n  protected accessTokenPayload: any;\n\n  protected parsePayload(): void {\n    super.parsePayload();\n    this.parseAccessTokenPayload();\n  }\n\n  protected parseAccessTokenPayload(): any {\n    const accessToken = this.getValue();\n    if (!accessToken) {\n      throw new NbAuthTokenNotFoundError('access_token key not found.')\n    }\n    this.accessTokenPayload = decodeJwtPayload(accessToken);\n  }\n\n  /**\n   * Returns access token payload\n   * @returns any\n   */\n  getAccessTokenPayload(): any {\n    return this.accessTokenPayload;\n  }\n\n  /**\n   * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n   */\n  protected prepareCreatedAt(date: Date) {\n    const payload = this.accessTokenPayload;\n    return payload && payload.iat ? new Date(Number(payload.iat) * 1000) : super.prepareCreatedAt(date);\n  }\n\n  /**\n   * Is token valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return this.accessTokenPayload && super.isValid();\n  }\n\n  /**\n   * Returns expiration date :\n   * - exp if set,\n   * - super.getExpDate() otherwise\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (this.accessTokenPayload && this.accessTokenPayload.hasOwnProperty('exp')) {\n      const date = new Date(0);\n      date.setUTCSeconds(this.accessTokenPayload.exp);\n      return date;\n    } else {\n      return super.getTokenExpDate();\n    }\n  }\n}\n"]}