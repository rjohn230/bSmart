import { Injectable, Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class PlaidLinkHandler {
    /**
     * Constructor configures the Plaid Link handler with given config options.
     * @param {?} config
     */
    constructor(config) {
        this.plaidLink = Plaid.create(config);
    }
    /**
     * Open the Plaid Link window for this handler.
     * @param {?=} institution
     * @return {?}
     */
    open(institution) {
        this.plaidLink.open(institution);
    }
    /**
     * Closes the currently open Plaid Link window if any.
     * @return {?}
     */
    exit() {
        this.plaidLink.exit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxPlaidLinkService {
    constructor() { }
    /**
     * Create a Plaid Link instance as soon as Plaid Link has loaded.
     * @param {?} config
     * @return {?} Promise<PlaidLinkHandler>
     */
    createPlaid(config) {
        return this.loadPlaid().then(() => {
            return new PlaidLinkHandler(config);
        });
    }
    /**
     * Load or wait for the Plaid Link library to load.
     * @return {?} Promise<void>
     */
    loadPlaid() {
        if (!this.loaded) {
            this.loaded = new Promise((resolve, reject) => {
                /** @type {?} */
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';
                script.onerror = (e) => reject(e);
                if (script.readyState) {
                    script.onreadystatechange = () => {
                        if (script.readyState === 'loaded' || script.readyState === 'complete') {
                            script.onreadystatechange = null;
                            resolve();
                        }
                    };
                }
                else {
                    script.onload = () => {
                        resolve();
                    };
                }
                document.getElementsByTagName('body')[0].appendChild(script);
            });
        }
        return this.loaded;
    }
}
NgxPlaidLinkService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxPlaidLinkService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function getWindow() {
    return window;
}
class NgxPlaidLinkButtonComponent {
    /**
     * @param {?} plaidLinkLoader
     */
    constructor(plaidLinkLoader) {
        this.plaidLinkLoader = plaidLinkLoader;
        this.defaultProps = {
            apiVersion: 'v2',
            env: 'sandbox',
            institution: null,
            token: null,
            style: {
                'background-color': '#0085e4',
                'transition-duration': '350ms',
                'transition-property': 'background-color, box-shadow',
                'transition-timing-function': 'ease-in-out',
                '-webkit-appearance': 'button',
                'border': '0',
                'border-radius': '4px',
                'box-shadow': '0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)',
                'color': '#fff',
                'font-size': '20px',
                'height': '56px',
                'outline': '0',
                'text-align': 'center',
                'text-transform': 'none',
                'padding': '0 2em',
                'cursor': 'pointer'
            },
            buttonText: 'Log In To Your Bank Account',
            webhook: '',
            product: ['auth'],
            className: 'plaid-link-button'
        };
        this.apiVersion = this.defaultProps.apiVersion;
        this.env = this.defaultProps.env;
        this.institution = this.defaultProps.institution;
        this.product = this.defaultProps.product;
        this.token = this.defaultProps.token;
        this.webhook = this.defaultProps.webhook;
        this.style = this.defaultProps.style;
        this.className = this.defaultProps.className;
        this.buttonText = this.defaultProps.buttonText;
        this.Event = new EventEmitter();
        this.Click = new EventEmitter();
        this.Load = new EventEmitter();
        this.Exit = new EventEmitter();
        this.Success = new EventEmitter();
        this.disabledButton = true;
    }
    /**
     * @return {?}
     */
    get nativeWindow() {
        return getWindow();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const self = this;
        this.plaidLinkLoader.createPlaid({
            env: self.env,
            key: self.publicKey,
            product: self.product,
            apiVersion: 'v2',
            clientName: self.clientName,
            onSuccess: function (public_token, metadata) {
                self.onSuccess(public_token, metadata);
            },
            onExit: function (err, metadata) {
                self.onExit(err, metadata);
            },
            onEvent: function (eventName, metadata) {
                self.onEvent(eventName, metadata);
            },
            onLoad: function () {
                self.onLoad();
            },
            token: self.token || null,
            webhook: self.webhook || null
        }).then((handler) => {
            this.disabledButton = false;
            this.plaidLinkHandler = handler;
        });
    }
    /**
     * @return {?}
     */
    onScriptError() {
        console.error('There was an issue loading the link-initialize.js script');
    }
    /**
     * @param {?} error
     * @param {?} metadata
     * @return {?}
     */
    onExit(error, metadata) {
        this.Exit.emit({
            error: error,
            metadata: metadata
        });
    }
    /**
     * @param {?} eventName
     * @param {?} metadata
     * @return {?}
     */
    onEvent(eventName, metadata) {
        this.Event.emit({
            eventName: eventName,
            metadata: metadata
        });
    }
    /**
     * @param {?} public_token
     * @param {?} metadata
     * @return {?}
     */
    onSuccess(public_token, metadata) {
        this.Success.emit({
            token: public_token,
            metadata: metadata
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        this.Click.emit($event);
        /** @type {?} */
        const institution = this.institution || null;
        if (this.plaidLinkHandler) {
            this.plaidLinkHandler.open(institution);
        }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onLoad($event = 'link_loaded') {
        this.Load.emit($event);
    }
}
NgxPlaidLinkButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'mr-ngx-plaid-link-button',
                template: `
    <button
      (click)="onClick($event)"
      [class]="className"
      [disabled]="disabledButton"
      [ngStyle]="style">
      {{buttonText}}
    </button>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxPlaidLinkButtonComponent.ctorParameters = () => [
    { type: NgxPlaidLinkService }
];
NgxPlaidLinkButtonComponent.propDecorators = {
    apiVersion: [{ type: Input }],
    clientName: [{ type: Input }],
    env: [{ type: Input }],
    institution: [{ type: Input }],
    publicKey: [{ type: Input }],
    product: [{ type: Input }],
    token: [{ type: Input }],
    webhook: [{ type: Input }],
    style: [{ type: Input }],
    className: [{ type: Input }],
    buttonText: [{ type: Input }],
    Event: [{ type: Output }],
    Click: [{ type: Output }],
    Load: [{ type: Output }],
    Exit: [{ type: Output }],
    Success: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxPlaidLinkModule {
}
NgxPlaidLinkModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                providers: [
                    NgxPlaidLinkService
                ],
                declarations: [NgxPlaidLinkButtonComponent],
                exports: [NgxPlaidLinkButtonComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxPlaidLinkService, NgxPlaidLinkButtonComponent, NgxPlaidLinkModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,