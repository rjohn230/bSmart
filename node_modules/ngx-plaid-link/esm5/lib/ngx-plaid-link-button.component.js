/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { NgxPlaidLinkService } from './ngx-plaid-link.service';
/**
 * @record
 */
export function ICustomWindow() { }
/** @type {?} */
ICustomWindow.prototype.Plaid;
/**
 * @return {?}
 */
function getWindow() {
    return window;
}
var NgxPlaidLinkButtonComponent = /** @class */ (function () {
    function NgxPlaidLinkButtonComponent(plaidLinkLoader) {
        this.plaidLinkLoader = plaidLinkLoader;
        this.defaultProps = {
            apiVersion: 'v2',
            env: 'sandbox',
            institution: null,
            token: null,
            style: {
                'background-color': '#0085e4',
                'transition-duration': '350ms',
                'transition-property': 'background-color, box-shadow',
                'transition-timing-function': 'ease-in-out',
                '-webkit-appearance': 'button',
                'border': '0',
                'border-radius': '4px',
                'box-shadow': '0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)',
                'color': '#fff',
                'font-size': '20px',
                'height': '56px',
                'outline': '0',
                'text-align': 'center',
                'text-transform': 'none',
                'padding': '0 2em',
                'cursor': 'pointer'
            },
            buttonText: 'Log In To Your Bank Account',
            webhook: '',
            product: ['auth'],
            className: 'plaid-link-button'
        };
        this.apiVersion = this.defaultProps.apiVersion;
        this.env = this.defaultProps.env;
        this.institution = this.defaultProps.institution;
        this.product = this.defaultProps.product;
        this.token = this.defaultProps.token;
        this.webhook = this.defaultProps.webhook;
        this.style = this.defaultProps.style;
        this.className = this.defaultProps.className;
        this.buttonText = this.defaultProps.buttonText;
        this.Event = new EventEmitter();
        this.Click = new EventEmitter();
        this.Load = new EventEmitter();
        this.Exit = new EventEmitter();
        this.Success = new EventEmitter();
        this.disabledButton = true;
    }
    Object.defineProperty(NgxPlaidLinkButtonComponent.prototype, "nativeWindow", {
        get: /**
         * @return {?}
         */
        function () {
            return getWindow();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var self = this;
        this.plaidLinkLoader.createPlaid({
            env: self.env,
            key: self.publicKey,
            product: self.product,
            apiVersion: 'v2',
            clientName: self.clientName,
            onSuccess: function (public_token, metadata) {
                self.onSuccess(public_token, metadata);
            },
            onExit: function (err, metadata) {
                self.onExit(err, metadata);
            },
            onEvent: function (eventName, metadata) {
                self.onEvent(eventName, metadata);
            },
            onLoad: function () {
                self.onLoad();
            },
            token: self.token || null,
            webhook: self.webhook || null
        }).then(function (handler) {
            _this.disabledButton = false;
            _this.plaidLinkHandler = handler;
        });
    };
    /**
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.onScriptError = /**
     * @return {?}
     */
    function () {
        console.error('There was an issue loading the link-initialize.js script');
    };
    /**
     * @param {?} error
     * @param {?} metadata
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.onExit = /**
     * @param {?} error
     * @param {?} metadata
     * @return {?}
     */
    function (error, metadata) {
        this.Exit.emit({
            error: error,
            metadata: metadata
        });
    };
    /**
     * @param {?} eventName
     * @param {?} metadata
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.onEvent = /**
     * @param {?} eventName
     * @param {?} metadata
     * @return {?}
     */
    function (eventName, metadata) {
        this.Event.emit({
            eventName: eventName,
            metadata: metadata
        });
    };
    /**
     * @param {?} public_token
     * @param {?} metadata
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.onSuccess = /**
     * @param {?} public_token
     * @param {?} metadata
     * @return {?}
     */
    function (public_token, metadata) {
        this.Success.emit({
            token: public_token,
            metadata: metadata
        });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.Click.emit($event);
        /** @type {?} */
        var institution = this.institution || null;
        if (this.plaidLinkHandler) {
            this.plaidLinkHandler.open(institution);
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    NgxPlaidLinkButtonComponent.prototype.onLoad = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event === void 0) { $event = 'link_loaded'; }
        this.Load.emit($event);
    };
    NgxPlaidLinkButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mr-ngx-plaid-link-button',
                    template: "\n    <button\n      (click)=\"onClick($event)\"\n      [class]=\"className\"\n      [disabled]=\"disabledButton\"\n      [ngStyle]=\"style\">\n      {{buttonText}}\n    </button>\n  ",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    NgxPlaidLinkButtonComponent.ctorParameters = function () { return [
        { type: NgxPlaidLinkService }
    ]; };
    NgxPlaidLinkButtonComponent.propDecorators = {
        apiVersion: [{ type: Input }],
        clientName: [{ type: Input }],
        env: [{ type: Input }],
        institution: [{ type: Input }],
        publicKey: [{ type: Input }],
        product: [{ type: Input }],
        token: [{ type: Input }],
        webhook: [{ type: Input }],
        style: [{ type: Input }],
        className: [{ type: Input }],
        buttonText: [{ type: Input }],
        Event: [{ type: Output }],
        Click: [{ type: Output }],
        Load: [{ type: Output }],
        Exit: [{ type: Output }],
        Success: [{ type: Output }]
    };
    return NgxPlaidLinkButtonComponent;
}());
export { NgxPlaidLinkButtonComponent };
if (false) {
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.plaidLinkHandler;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.defaultProps;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.disabledButton;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.apiVersion;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.clientName;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.env;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.institution;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.publicKey;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.product;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.token;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.webhook;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.style;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.className;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.buttonText;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.Event;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.Click;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.Load;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.Exit;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.Success;
    /** @type {?} */
    NgxPlaidLinkButtonComponent.prototype.plaidLinkLoader;
}

//# sourceMappingURL=data:application/json;base64,