/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PlaidLinkHandler } from './ngx-plaid-link-handler';
var NgxPlaidLinkService = /** @class */ (function () {
    function NgxPlaidLinkService() {
    }
    /**
     * Create a Plaid Link instance as soon as Plaid Link has loaded.
     * @param {?} config
     * @return {?} Promise<PlaidLinkHandler>
     */
    NgxPlaidLinkService.prototype.createPlaid = /**
     * Create a Plaid Link instance as soon as Plaid Link has loaded.
     * @param {?} config
     * @return {?} Promise<PlaidLinkHandler>
     */
    function (config) {
        return this.loadPlaid().then(function () {
            return new PlaidLinkHandler(config);
        });
    };
    /**
     * Load or wait for the Plaid Link library to load.
     * @return {?} Promise<void>
     */
    NgxPlaidLinkService.prototype.loadPlaid = /**
     * Load or wait for the Plaid Link library to load.
     * @return {?} Promise<void>
     */
    function () {
        if (!this.loaded) {
            this.loaded = new Promise(function (resolve, reject) {
                /** @type {?} */
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';
                script.onerror = function (e) { return reject(e); };
                if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === 'loaded' || script.readyState === 'complete') {
                            script.onreadystatechange = null;
                            resolve();
                        }
                    };
                }
                else {
                    script.onload = function () {
                        resolve();
                    };
                }
                document.getElementsByTagName('body')[0].appendChild(script);
            });
        }
        return this.loaded;
    };
    NgxPlaidLinkService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxPlaidLinkService.ctorParameters = function () { return []; };
    return NgxPlaidLinkService;
}());
export { NgxPlaidLinkService };
if (false) {
    /** @type {?} */
    NgxPlaidLinkService.prototype.loaded;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBsYWlkLWxpbmsuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wbGFpZC1saW5rLyIsInNvdXJjZXMiOlsibGliL25neC1wbGFpZC1saW5rLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0lBTzFEO0tBQWlCOzs7Ozs7SUFPVix5Q0FBVzs7Ozs7Y0FBQyxNQUFtQjtRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyQyxDQUFDLENBQUM7Ozs7OztJQU9FLHVDQUFTOzs7OztRQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBTyxVQUFDLE9BQU8sRUFBRSxNQUFNOztnQkFDOUMsSUFBTSxNQUFNLEdBQVEsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckQsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztnQkFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRyx5REFBeUQsQ0FBQztnQkFDdkUsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFDLENBQU0sSUFBSyxPQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBVCxDQUFTLENBQUM7Z0JBQ3ZDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUN0QixNQUFNLENBQUMsa0JBQWtCLEdBQUc7d0JBQzFCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQzs0QkFDdkUsTUFBTSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQzs0QkFDakMsT0FBTyxFQUFFLENBQUM7eUJBQ1g7cUJBQ0YsQ0FBQztpQkFDSDtnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixNQUFNLENBQUMsTUFBTSxHQUFHO3dCQUNkLE9BQU8sRUFBRSxDQUFDO3FCQUNYLENBQUM7aUJBQ0g7Z0JBQ0QsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM5RCxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzs7Z0JBN0N0QixVQUFVOzs7OzhCQUpYOztTQUthLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsYWlkQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFBsYWlkTGlua0hhbmRsZXIgfSBmcm9tICcuL25neC1wbGFpZC1saW5rLWhhbmRsZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4UGxhaWRMaW5rU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBsb2FkZWQ6IFByb21pc2U8dm9pZD47XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgUGxhaWQgTGluayBpbnN0YW5jZSBhcyBzb29uIGFzIFBsYWlkIExpbmsgaGFzIGxvYWRlZC5cbiAgICogQHBhcmFtIFBsYWlkQ29uZmlnIGNvbmZpZ1xuICAgKiBAcmV0dXJucyBQcm9taXNlPFBsYWlkTGlua0hhbmRsZXI+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlUGxhaWQoY29uZmlnOiBQbGFpZENvbmZpZyk6IFByb21pc2U8UGxhaWRMaW5rSGFuZGxlcj4ge1xuICAgIHJldHVybiB0aGlzLmxvYWRQbGFpZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQbGFpZExpbmtIYW5kbGVyKGNvbmZpZyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBvciB3YWl0IGZvciB0aGUgUGxhaWQgTGluayBsaWJyYXJ5IHRvIGxvYWQuXG4gICAqIEByZXR1cm5zIFByb21pc2U8dm9pZD5cbiAgICovXG4gIHB1YmxpYyBsb2FkUGxhaWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmxvYWRlZCkge1xuICAgICAgdGhpcy5sb2FkZWQgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHNjcmlwdDogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgIHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly9jZG4ucGxhaWQuY29tL2xpbmsvdjIvc3RhYmxlL2xpbmstaW5pdGlhbGl6ZS5qcyc7XG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gKGU6IGFueSkgPT4gcmVqZWN0KGUpO1xuICAgICAgICBpZiAoc2NyaXB0LnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNjcmlwdC5yZWFkeVN0YXRlID09PSAnbG9hZGVkJyB8fCBzY3JpcHQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvYWRlZDtcbiAgfVxuXG59XG4iXX0=