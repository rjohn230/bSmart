{"version":3,"sources":["ng://ngx-plaid-link/lib/ngx-plaid-link-handler.ts","ng://ngx-plaid-link/lib/ngx-plaid-link.service.ts","ng://ngx-plaid-link/lib/ngx-plaid-link-button.component.ts","ng://ngx-plaid-link/lib/ngx-plaid-link.module.ts"],"names":["PlaidLinkHandler","config","this","plaidLink","Plaid","create","prototype","open","institution","exit","NgxPlaidLinkService","createPlaid","loadPlaid","then","loaded","Promise","resolve","reject","script","document","createElement","type","src","onerror","e","readyState","onreadystatechange","onload","getElementsByTagName","appendChild","Injectable","NgxPlaidLinkButtonComponent","plaidLinkLoader","apiVersion","env","token","style","background-color","transition-duration","transition-property","transition-timing-function","-webkit-appearance","border","border-radius","box-shadow","color","font-size","height","outline","text-align","text-transform","padding","cursor","buttonText","webhook","product","className","defaultProps","EventEmitter","disabledButton","Object","defineProperty","getWindow","window","ngAfterViewInit","_this","self","key","publicKey","clientName","onSuccess","public_token","metadata","onExit","err","onEvent","eventName","onLoad","handler","plaidLinkHandler","onScriptError","console","error","Exit","emit","Event","Success","onClick","$event","Click","Load","Component","args","selector","template","styles","Input","Output","NgxPlaidLinkModule","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["import { PlaidConfig } from './interfaces';\n\ndeclare let Plaid: any;\n\nexport class PlaidLinkHandler {\n\n  /**\n   * Holds the Plaid Link instance.\n   */\n  private plaidLink: any;\n\n  /**\n   * Constructor configures the Plaid Link handler with given config options.\n   * @param PlaidConfig config\n   */\n  constructor(config: PlaidConfig) {\n    this.plaidLink = Plaid.create(config);\n  }\n\n  /**\n   * Open the Plaid Link window for this handler.\n   * @param string institution The name of the institution to open\n   */\n  public open(institution?: string): void {\n    this.plaidLink.open(institution);\n  }\n\n  /**\n   * Closes the currently open Plaid Link window if any.\n   */\n  public exit(): void {\n    this.plaidLink.exit();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { PlaidConfig } from './interfaces';\nimport { PlaidLinkHandler } from './ngx-plaid-link-handler';\n\n@Injectable()\nexport class NgxPlaidLinkService {\n\n  private loaded: Promise<void>;\n\n  constructor() { }\n\n  /**\n   * Create a Plaid Link instance as soon as Plaid Link has loaded.\n   * @param PlaidConfig config\n   * @returns Promise<PlaidLinkHandler>\n   */\n  public createPlaid(config: PlaidConfig): Promise<PlaidLinkHandler> {\n    return this.loadPlaid().then(() => {\n      return new PlaidLinkHandler(config);\n    });\n  }\n\n  /**\n   * Load or wait for the Plaid Link library to load.\n   * @returns Promise<void>\n   */\n  public loadPlaid(): Promise<void> {\n    if (!this.loaded) {\n      this.loaded = new Promise<void>((resolve, reject) => {\n        const script: any = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n        script.onerror = (e: any) => reject(e);\n        if (script.readyState) {\n          script.onreadystatechange = () => {\n            if (script.readyState === 'loaded' || script.readyState === 'complete') {\n              script.onreadystatechange = null;\n              resolve();\n            }\n          };\n        } else {\n          script.onload = () => {\n            resolve();\n          };\n        }\n        document.getElementsByTagName('body')[0].appendChild(script);\n      });\n    }\n\n    return this.loaded;\n  }\n\n}\n","import { Component, Input, Output, EventEmitter, AfterViewInit } from '@angular/core';\nimport {\n  PlaidErrorMetadata,\n  PlaidErrorObject,\n  PlaidEventMetadata,\n  PlaidOnEventArgs,\n  PlaidOnExitArgs,\n  PlaidOnSuccessArgs,\n  PlaidSuccessMetadata,\n  PlaidConfig\n} from './interfaces';\nimport { NgxPlaidLinkService } from './ngx-plaid-link.service';\nimport { PlaidLinkHandler } from './ngx-plaid-link-handler';\n\nexport interface ICustomWindow extends Window {\n  Plaid: {\n    create: Function;\n  };\n}\n\nfunction getWindow(): any {\n  return window;\n}\n\n@Component({\n  selector: 'mr-ngx-plaid-link-button',\n  template: `\n    <button\n      (click)=\"onClick($event)\"\n      [class]=\"className\"\n      [disabled]=\"disabledButton\"\n      [ngStyle]=\"style\">\n      {{buttonText}}\n    </button>\n  `,\n  styles: []\n})\nexport class NgxPlaidLinkButtonComponent implements AfterViewInit {\n\n  private plaidLinkHandler: PlaidLinkHandler;\n\n  private defaultProps = {\n    apiVersion: 'v2',\n    env: 'sandbox',\n    institution: null,\n    token: null,\n    style: {\n      'background-color': '#0085e4',\n      'transition-duration': '350ms',\n      'transition-property': 'background-color, box-shadow',\n      'transition-timing-function': 'ease-in-out',\n      '-webkit-appearance': 'button',\n      'border': '0',\n      'border-radius': '4px',\n      'box-shadow': '0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)',\n      'color': '#fff',\n      'font-size': '20px',\n      'height': '56px',\n      'outline': '0',\n      'text-align': 'center',\n      'text-transform': 'none',\n      'padding': '0 2em',\n      'cursor': 'pointer'\n    },\n    buttonText: 'Log In To Your Bank Account',\n    webhook: '',\n    product: ['auth'],\n    className: 'plaid-link-button'\n  };\n\n  disabledButton: boolean;\n\n  @Input() apiVersion?: string = this.defaultProps.apiVersion;\n  @Input() clientName: string;\n  @Input() env?: string = this.defaultProps.env;\n  @Input() institution?: string = this.defaultProps.institution;\n  @Input() publicKey: string;\n  @Input() product?: Array<string> = this.defaultProps.product;\n  @Input() token?: string = this.defaultProps.token;\n  @Input() webhook?: string = this.defaultProps.webhook;\n  @Input() style?: any = this.defaultProps.style;\n  @Input() className?: string = this.defaultProps.className;\n  @Input() buttonText?: string = this.defaultProps.buttonText;\n\n  @Output() Event: EventEmitter<PlaidOnEventArgs> = new EventEmitter();\n  @Output() Click: EventEmitter<any> = new EventEmitter();\n  @Output() Load: EventEmitter<any> = new EventEmitter();\n  @Output() Exit: EventEmitter<PlaidOnExitArgs> = new EventEmitter();\n  @Output() Success: EventEmitter<PlaidOnSuccessArgs> = new EventEmitter();\n\n  get nativeWindow(): ICustomWindow {\n    return getWindow();\n  }\n\n  constructor(private plaidLinkLoader: NgxPlaidLinkService) {\n    this.disabledButton = true;\n  }\n\n  ngAfterViewInit() {\n    const self = this;\n    this.plaidLinkLoader.createPlaid({\n      env: self.env,\n      key: self.publicKey,\n      product: self.product,\n      apiVersion: 'v2',\n      clientName: self.clientName,\n      onSuccess: function (public_token, metadata) {\n        self.onSuccess(public_token, metadata);\n      },\n      onExit: function (err, metadata) {\n        self.onExit(err, metadata);\n      },\n      onEvent: function (eventName, metadata) {\n        self.onEvent(eventName, metadata);\n      },\n      onLoad: function () {\n        self.onLoad();\n      },\n      token: self.token || null,\n      webhook: self.webhook || null\n    }).then((handler: PlaidLinkHandler) => {\n      this.disabledButton = false;\n      this.plaidLinkHandler = handler;\n    });\n  }\n\n  onScriptError() {\n    console.error('There was an issue loading the link-initialize.js script');\n  }\n\n  public onExit(error: PlaidErrorObject, metadata: PlaidErrorMetadata) {\n    this.Exit.emit({\n      error: error,\n      metadata: metadata\n    });\n  }\n\n  public onEvent(eventName: string, metadata: PlaidEventMetadata) {\n    this.Event.emit({\n      eventName: eventName,\n      metadata: metadata\n    });\n  }\n\n  public onSuccess(public_token: string, metadata: PlaidSuccessMetadata) {\n    this.Success.emit({\n      token: public_token,\n      metadata: metadata\n    });\n  }\n\n  onClick($event) {\n    this.Click.emit($event);\n    // Open to a specific institution if necessary;\n    const institution = this.institution || null;\n    if (this.plaidLinkHandler) {\n      this.plaidLinkHandler.open(institution);\n    }\n  }\n\n  public onLoad($event = 'link_loaded') {\n    this.Load.emit($event);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxPlaidLinkButtonComponent } from './ngx-plaid-link-button.component';\nimport { NgxPlaidLinkService } from './ngx-plaid-link.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    NgxPlaidLinkService\n  ],\n  declarations: [NgxPlaidLinkButtonComponent],\n  exports: [NgxPlaidLinkButtonComponent]\n})\nexport class NgxPlaidLinkModule { }\n"]}