"use strict";
const tslint = require("tslint");
const path = require("path");
//TODO we "steal"" an error code with a registered code fix. 2515 = implement inherited abstract class
const TSLINT_ERROR_CODE = 2515;
function init(modules) {
    const ts = modules.typescript;
    let codeFixActions = new Map();
    let registeredCodeFixes = false;
    let configCache = {
        filePath: null,
        configuration: null,
        isDefaultConfig: false,
        configFilePath: null
    };
    // Work around the lack of API to register a CodeFix
    function registerCodeFix(action) {
        return ts.codefix.registerCodeFix(action);
    }
    if (!registeredCodeFixes && ts && ts.codefix) {
        registerCodeFixes(registerCodeFix);
        registeredCodeFixes = true;
    }
    function registerCodeFixes(registerCodeFix) {
        // Code fix for that is used for all tslint fixes
        registerCodeFix({
            errorCodes: [TSLINT_ERROR_CODE],
            getCodeActions: (_context) => {
                return null;
            }
        });
    }
    function create(info) {
        info.project.projectService.logger.info("tslint-language-service loaded");
        let config = info.config;
        let configuration = null;
        // Set up decorator
        const proxy = Object.create(null);
        const oldLS = info.languageService;
        for (const k in oldLS) {
            proxy[k] = function () {
                return oldLS[k].apply(oldLS, arguments);
            };
        }
        // key to identify a rule failure
        function computeKey(start, end) {
            return `[${start},${end}]`;
        }
        function makeDiagnostic(problem, file) {
            let message = (problem.getRuleName() !== null)
                ? `${problem.getFailure()} (${problem.getRuleName()})`
                : `${problem.getFailure()}`;
            let category;
            if (config.alwaysShowRuleFailuresAsWarnings === true) {
                category = ts.DiagnosticCategory.Warning;
            }
            else if (problem.getRuleSeverity && problem.getRuleSeverity() === 'error') {
                // tslint5 supports to assign severities to rules
                category = ts.DiagnosticCategory.Error;
            }
            else {
                category = ts.DiagnosticCategory.Warning;
            }
            let diagnostic = {
                file: file,
                start: problem.getStartPosition().getPosition(),
                length: problem.getEndPosition().getPosition() - problem.getStartPosition().getPosition(),
                messageText: message,
                category: category,
                source: 'tslint',
                code: TSLINT_ERROR_CODE
            };
            return diagnostic;
        }
        /**
         * Filter failures for the given document
         */
        function filterProblemsForDocument(documentPath, failures) {
            let normalizedPath = path.normalize(documentPath);
            // we only show diagnostics targetting this open document, some tslint rule return diagnostics for other documents/files
            let normalizedFiles = new Map();
            return failures.filter(each => {
                let fileName = each.getFileName();
                if (!normalizedFiles.has(fileName)) {
                    normalizedFiles.set(fileName, path.normalize(fileName));
                }
                return normalizedFiles.get(fileName) === normalizedPath;
            });
        }
        function replacementsAreEmpty(fix) {
            // in tslint 4 a Fix has a replacement property witht the Replacements
            if (fix.replacements) {
                return fix.replacements.length === 0;
            }
            // tslint 5
            if (Array.isArray(fix)) {
                return fix.length === 0;
            }
            return false;
        }
        function recordCodeAction(problem, file) {
            let fix = null;
            // tslint can return a fix with an empty replacements array, these fixes are ignored
            if (problem.getFix && problem.getFix() && !replacementsAreEmpty(problem.getFix())) {
                fix = problem.getFix(); // createAutoFix(problem, document, problem.getFix());
            }
            if (!fix) {
                return;
            }
            let documentAutoFixes = codeFixActions.get(file.fileName);
            if (!documentAutoFixes) {
                documentAutoFixes = new Map();
                codeFixActions.set(file.fileName, documentAutoFixes);
            }
            documentAutoFixes.set(computeKey(problem.getStartPosition().getPosition(), problem.getEndPosition().getPosition()), problem);
        }
        function getConfigurationFailureMessage(err) {
            let errorMessage = `unknown error`;
            if (typeof err.message === 'string' || err.message instanceof String) {
                errorMessage = err.message;
            }
            return `tslint: Cannot read tslint configuration - '${errorMessage}'`;
        }
        function getConfiguration(filePath, configFileName) {
            if (configCache.configuration && configCache.filePath === filePath) {
                return configCache.configuration;
            }
            let isDefaultConfig = false;
            let configuration;
            let configFilePath = null;
            isDefaultConfig = tslint.Configuration.findConfigurationPath(configFileName, filePath) === undefined;
            let configurationResult = tslint.Configuration.findConfiguration(configFileName, filePath);
            // between tslint 4.0.1 and tslint 4.0.2 the attribute 'error' has been removed from IConfigurationLoadResult
            // in 4.0.2 findConfiguration throws an exception as in version ^3.0.0
            if (configurationResult.error) {
                throw configurationResult.error;
            }
            configuration = configurationResult.results;
            // In tslint version 5 the 'no-unused-variable' rules breaks the TypeScript language service plugin.
            // See https://github.com/Microsoft/TypeScript/issues/15344
            // Therefore we remove the rule from the configuration.
            //
            // In tslint 5 the rules are stored in a Map, in earlier versions they were stored in an Object
            if (config.disableNoUnusedVariableRule === true || config.disableNoUnusedVariableRule === undefined) {
                if (configuration.rules && configuration.rules instanceof Map) {
                    configuration.rules.delete('no-unused-variable');
                }
                if (configuration.jsRules && configuration.jsRules instanceof Map) {
                    configuration.jsRules.delete('no-unused-variable');
                }
            }
            configFilePath = configurationResult.path;
            configCache = {
                filePath: filePath,
                isDefaultConfig: isDefaultConfig,
                configuration: configuration,
                configFilePath: configFilePath
            };
            return configCache.configuration;
        }
        function captureWarnings(message) {
            // TODO log to a user visible log and not only the TS-Server log
            info.project.projectService.logger.info(`[tslint] ${message}`);
        }
        function convertReplacementToTextChange(repl) {
            return {
                newText: repl.text,
                span: { start: repl.start, length: repl.length }
            };
        }
        function getReplacements(fix) {
            let replacements = null;
            // in tslint4 a Fix has a replacement property with the Replacements
            if (fix.replacements) {
                // tslint4
                replacements = fix.replacements;
            }
            else {
                // in tslint 5 a Fix is a Replacement | Replacement[]                  
                if (!Array.isArray(fix)) {
                    replacements = [fix];
                }
                else {
                    replacements = fix;
                }
            }
            return replacements;
        }
        function addRuleFailureFix(fixes, problem, fileName) {
            let fix = problem.getFix();
            let replacements = getReplacements(fix);
            fixes.push({
                description: `Fix '${problem.getRuleName()}'`,
                changes: [{
                        fileName: fileName,
                        textChanges: replacements.map(each => convertReplacementToTextChange(each))
                    }]
            });
        }
        function addDisableRuleFix(fixes, problem, fileName, file) {
            fixes.push({
                description: `Disable rule '${problem.getRuleName()}'`,
                changes: [{
                        fileName: fileName,
                        textChanges: [{
                                newText: `// tslint:disable-next-line:${problem.getRuleName()}\n`,
                                span: { start: file.getLineStarts()[problem.getStartPosition().getLineAndCharacter().line], length: 0 }
                            }]
                    }]
            });
        }
        function addOpenConfigurationFix(fixes) {
            // the Open Configuration code action is disabled since there is no specified API to open an editor
            let openConfigFixEnabled = false;
            if (openConfigFixEnabled && configCache && configCache.configFilePath) {
                fixes.push({
                    description: `Open tslint.json`,
                    changes: [{
                            fileName: configCache.configFilePath,
                            textChanges: []
                        }]
                });
            }
        }
        function addAllAutoFixable(fixes, documentFixes, fileName) {
            const allReplacements = getNonOverlappingReplacements(documentFixes);
            fixes.push({
                description: `Fix all auto-fixable tslint failures`,
                changes: [{
                        fileName: fileName,
                        textChanges: allReplacements.map(each => convertReplacementToTextChange(each))
                    }]
            });
        }
        function getReplacement(failure, at) {
            return getReplacements(failure.getFix())[at];
        }
        function sortFailures(failures) {
            // The failures.replacements are sorted by position, we sort on the position of the first replacement
            return failures.sort((a, b) => {
                return getReplacement(a, 0).start - getReplacement(b, 0).start;
            });
        }
        function getNonOverlappingReplacements(documentFixes) {
            function overlaps(a, b) {
                return a.end >= b.start;
            }
            let sortedFailures = sortFailures([...documentFixes.values()]);
            let nonOverlapping = [];
            for (let i = 0; i < sortedFailures.length; i++) {
                let replacements = getReplacements(sortedFailures[i].getFix());
                if (i === 0 || !overlaps(nonOverlapping[nonOverlapping.length - 1], replacements[0])) {
                    nonOverlapping.push(...replacements);
                }
            }
            return nonOverlapping;
        }
        proxy.getSemanticDiagnostics = (fileName) => {
            let prior = oldLS.getSemanticDiagnostics(fileName);
            if (prior === undefined) {
                prior = [];
            }
            try {
                info.project.projectService.logger.info(`Computing tslint semantic diagnostics...`);
                if (codeFixActions.has(fileName)) {
                    codeFixActions.delete(fileName);
                }
                if (config.ignoreDefinitionFiles === true && fileName.endsWith('.d.ts')) {
                    return prior;
                }
                try {
                    configuration = getConfiguration(fileName, config.configFile);
                }
                catch (err) {
                    // TODO: show the reason for the configuration failure to the user and not only in the log
                    // https://github.com/Microsoft/TypeScript/issues/15913
                    info.project.projectService.logger.info(getConfigurationFailureMessage(err));
                    return prior;
                }
                let result;
                // tslint writes warning messages using console.warn()
                // capture the warnings and write them to the tslint plugin log
                let warn = console.warn;
                console.warn = captureWarnings;
                try {
                    // TODO the types of the Program provided by tsserver libary are not compatible with the one provided by typescript
                    // casting away the type
                    let options = { fix: false };
                    let linter = new tslint.Linter(options, oldLS.getProgram());
                    linter.lint(fileName, "", configuration);
                    result = linter.getResult();
                }
                catch (err) {
                    let errorMessage = `unknown error`;
                    if (typeof err.message === 'string' || err.message instanceof String) {
                        errorMessage = err.message;
                    }
                    info.project.projectService.logger.info('tslint error ' + errorMessage);
                    return prior;
                }
                finally {
                    console.warn = warn;
                }
                if (result.failures.length > 0) {
                    const tslintProblems = filterProblemsForDocument(fileName, result.failures);
                    if (tslintProblems && tslintProblems.length) {
                        const file = oldLS.getProgram().getSourceFile(fileName);
                        prior.push.apply(prior, tslintProblems.map(d => makeDiagnostic(d, file)));
                        tslintProblems.forEach(problem => {
                            recordCodeAction(problem, file);
                        });
                    }
                }
            }
            catch (e) {
                info.project.projectService.logger.info(`tslint-language service error: ${e.toString()}`);
                info.project.projectService.logger.info(`Stack trace: ${e.stack}`);
            }
            return prior;
        };
        proxy.getCodeFixesAtPosition = function (fileName, start, end, errorCodes, formatOptions) {
            let prior = oldLS.getCodeFixesAtPosition(fileName, start, end, errorCodes, formatOptions);
            if (prior === undefined) {
                prior = [];
            }
            info.project.projectService.logger.info("tslint-language-service getCodeFixes " + errorCodes[0]);
            let documentFixes = codeFixActions.get(fileName);
            if (documentFixes) {
                let problem = documentFixes.get(computeKey(start, end));
                if (problem) {
                    addRuleFailureFix(prior, problem, fileName);
                }
                addAllAutoFixable(prior, documentFixes, fileName);
                if (problem) {
                    addOpenConfigurationFix(prior);
                    addDisableRuleFix(prior, problem, fileName, oldLS.getProgram().getSourceFile(fileName));
                }
            }
            return prior;
        };
        return proxy;
    }
    return { create };
}
module.exports = init;
//# sourceMappingURL=data:application/json;base64,